Vcl = _{ SOI ~ Declarations ~ EOI }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#comments
COMMENT = {
    SlachComment
  | HashComment
  | BlockComment
}

SlachComment = { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
HashComment  = { "#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BlockComment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// https://developer.fastly.com/reference/vcl/declarations/
Declarations = _{ Declaration* }
Declaration  = _{
    IncludeDeclaration
  | ImportDeclaration
  | SubDeclaration
  | AclDeclaration
  | BackendDeclaration
  | DirectorDeclaration
  | PenaltyboxDeclaration
  | RateCounterDeclaration
  | TableDeclaration
}

// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#include
IncludeDeclaration =  { "include" ~ IncludeTarget ~ ";" }
IncludeTarget      = _{ QuotedString }

// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#import
ImportDeclaration =  { "import" ~ ImportTarget ~ ";" }
ImportTarget      = _{ Ident }

// https://developer.fastly.com/reference/vcl/declarations/acl/
AclDeclaration    =  { "acl" ~ AclIdent ~ AclBody }
AclIdent          = _{ Ident }
AclBody           = _{ "{" ~ AclEntries ~ "}" }
AclEntries        = _{ AclEntry* }
AclEntry          = _{ AclEntryValue ~ ";" }
AclEntryValue     =  { AclEntryNegated? ~ QuotedString ~ AclEntryCidr? }
AclEntryNegated   =  { "!" }
AclEntryCidr      = _{ "/" ~ AclEntryCidrValue }
AclEntryCidrValue =  { ASCII_DIGIT+ }

// https://developer.fastly.com/reference/vcl/declarations/backend/
BackendDeclaration =  { "backend" ~ BackendIdent ~ BackendBody }
BackendIdent       = _{ Ident }
BackendBody        = _{ Object }

// https://developer.fastly.com/reference/vcl/declarations/director/
DirectorDeclaration =  { "director" ~ DirectorIdent ~ DirectorType ~ DirectorBody }
DirectorIdent       = _{ Ident }
DirectorType        = _{ Ident }
DirectorBody        =  { "{" ~ (ObjectEntry | DirectorEntry)* ~ "}" }
DirectorEntry       =  { Object }

// https://developer.fastly.com/reference/vcl/declarations/penaltybox/
PenaltyboxDeclaration =  { "penaltybox" ~ PenaltyboxIdent ~ PenaltyboxBody }
PenaltyboxIdent       = _{ Ident }
PenaltyboxBody        =  { "{" ~ "}" }

// https://developer.fastly.com/reference/vcl/declarations/ratecounter/
RateCounterDeclaration =  { "ratecounter" ~ RateCounterIdent ~ RateCounterBody }
RateCounterIdent       = _{ Ident }
RateCounterBody        =  { "{" ~ "}" }

// https://developer.fastly.com/reference/vcl/declarations/sub/
SubDeclaration    =  { "sub" ~ SubIdent ~ SubType? ~ SubBody }
SubIdent          = _{ Ident }
SubType           = _{ Type }
SubBody           =  { "{" ~ SubBodyStatements ~ "}" }
SubBodyStatements = _{ Statement* }

// https://developer.fastly.com/reference/vcl/declarations/table/
TableDeclaration =  { "table" ~ TableIdent ~ TableType? ~ TableBody }
TableIdent       = _{ Ident }
TableType        = _{ Type }
TableBody        =  { "{" ~ (TableEntry ~ ("," ~ TableEntry)* ~ ","?)? ~ "}" }
TableEntry       =  { TableKey ~ ":" ~ TableValue }
TableKey         =  { String }
TableValue       =  { String | RTime | Number | Bool | Ident }

// https://developer.fastly.com/reference/vcl/types/string/
// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#strings
// Triple-quoted strings are not supported by Fastly
String                  =  { StringToken+ }
StringToken             =  { EmptyString | HeredocString | BracesQuotedString | QuotedString }
EmptyString             = @{ "{" ~ PUSH((ASCII_ALPHA | "_")+) ~ "\"\"" ~ POP ~ "}" | "{\"\"}" | "\"\"" }
HeredocString           = @{ "{" ~ PUSH((ASCII_ALPHA | "_")+) ~ "\"" ~ HeredocStringInner ~ "\"" ~ POP ~ "}" }
HeredocStringInner      = @{ HeredocStringChar* }
HeredocStringChar       = @{ !("\"" ~ PEEK ~ "}") ~ ANY }
BracesQuotedString      = @{ "{\"" ~ BracesQuotedStringInner ~ "\"}" }
BracesQuotedStringInner = @{ BracesQuotedStringChar* }
BracesQuotedStringChar  = @{ !("\"}") ~ ANY }
QuotedString            = @{ "\"" ~ QuotedStringInner ~ "\"" }
QuotedStringInner       = @{ QuotedStringChar* }
QuotedStringChar        = @{ !"\"" ~ ANY }

// https://developer.fastly.com/reference/vcl/types/bool/
// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#booleans
Bool = { "true" | "false" }

// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#numbers
// https://developer.fastly.com/reference/vcl/types/integer/
// https://developer.fastly.com/reference/vcl/types/float/
Number                = @{ NumberBased10 | NumberBased16 }
NumberBased10         = @{ "-"? ~ ASCII_DIGIT+ ~ NumberBased10Fraction? ~ NumberBased10Exponent? }
NumberBased10Fraction = @{ "." ~ ASCII_DIGIT+ }
NumberBased10Exponent = @{ "e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }
NumberBased16         = @{ "-"? ~ "0x" ~ ASCII_HEX_DIGIT+ ~ NumberBased16Fraction? ~ NumberBased16Exponent? }
NumberBased16Fraction = @{ "." ~ ASCII_HEX_DIGIT+ }
NumberBased16Exponent = @{ "p" ~ ("+" | "-")? ~ ASCII_DIGIT+ }

// https://developer.fastly.com/reference/vcl/types/rtime/
// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#duration
RTime         =  { RTimeValue ~ RTimeUnit }
RTimeValue    =  { "-"? ~ RTimeAbsolute }
RTimeAbsolute = @{ ASCII_DIGIT+ ~ RTimeFraction? }
RTimeFraction = @{ "." ~ ASCII_DIGIT+ }
RTimeUnit     = @{ "ms" | "s" | "m" | "h" | "d" | "y" }

// object
Object        =  { "{" ~ ObjectEntry* ~ "}" }
ObjectEntry   =  { ObjectKey ~ "=" ~ ObjectValue }
ObjectKey     =  { "." ~ ObjectKeyName }
ObjectKeyName =  { Ident }
ObjectValue   = _{ Object | ((String | RTime | Number | Bool | Ident) ~ ";") }

// ident
Ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// types
Type = {
    "VOID"
  | "ACL"
  | "BACKEND"
  | "BOOL"
  | "INTEGER"
  | "FLOAT"
  | "ID"
  | "IP"
  | "RTIME"
  | "STRING"
  | "TIME"
}

Statement = {
    IfStatement
  | SetStatement
  | UnsetStatement
  | AddStatement
  | CallStatement
  | DeclareStatement
  | ErrorStatement
  | EsiStatement
  | IncludeStatement
  | LogStatement
  | RestartStatement
  | ReturnStatement
  | SyntheticStatement
  | SyntheticBase64Statement
}

Literal =  { Object | String | RTime | Number | Bool }
Expr    =  { Prefix* ~ Primary ~ (Infix ~ Prefix* ~ Primary)* }
Infix   = _{ BinaryOperator }
Prefix  = _{ OpNot | OpMinus }
Primary =  { FunctionCall | Concat | "(" ~ Expr ~ ")" }
Concat  =  { (Literal | Variable)+ }

Variable         =  { Ident ~ VariableProp* ~ SubfieldAccess? }
VariableProp     = _{ "." ~ VariablePropName }
VariablePropName = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-")* }
SubfieldAccess   = _{ ":" ~ Ident }

FunctionCall     = { Variable ~ "(" ~ FunctionCallArgs? ~ ")" }
FunctionCallArgs = { Expr ~ ("," ~ Expr)* }

BinaryOperator  = _{
    OpEq
  | OpNe
  | OpRegexMatch
  | OpRegexNotMatch
  | OpLe
  | OpLt
  | OpGe
  | OpGt
  | OpAnd
  | OpOr
  | OpAdd
  | OpSub
  | OpMul
  | OpDiv
}
OpNot           =  { "!" }
OpMinus         =  { "-" }
OpEq            =  { "==" }
OpNe            =  { "!=" }
OpRegexMatch    =  { "~" }
OpRegexNotMatch =  { "!~" }
OpLe            =  { "<=" }
OpLt            =  { "<" }
OpGe            =  { ">=" }
OpGt            =  { ">" }
OpAnd           =  { "&&" }
OpOr            =  { "||" }
OpAdd           =  { "+" }
OpSub           =  { "-" }
OpMul           =  { "*" }
OpDiv           =  { "/" }

// https://developer.fastly.com/reference/vcl/functions/miscellaneous/if/
// https://www.varnish-software.com/developers/tutorials/varnish-configuration-language-vcl/#conditionals
IfStatement   =  { "if" ~ IfCondition ~ IfBody ~ IfElse? }
IfCondition   = _{ "(" ~ Expr ~ ")" }
IfBody        =  { "{" ~ Statement* ~ "}" }
IfElse        =  { ElseIf | Else }
Else          =  { "else" ~ IfBody }
ElseIf        =  { ElseIfKeyword ~ IfCondition ~ IfBody ~ IfElse? }
ElseIfKeyword = _{ "elif" | "elsif" | "elseif" | ("else" ~ "if") }

// https://developer.fastly.com/reference/vcl/statements/set/
SetStatement =  { "set" ~ SetTarget ~ SetOperator ~ SetValue ~ ";" }
SetTarget    = _{ Variable }
SetValue     = _{ Expr }
SetOperator  =  {
    "="
  | "+="
  | "-="
  | "*="
  | "/="
  | "%="
  | "|="
  | "&="
  | "^="
  | "<<="
  | ">>="
  | "ror="
  | "rol="
  | "&&="
  | "||="
}

// https://developer.fastly.com/reference/vcl/statements/unset/
UnsetStatement = { ("unset" | "remove") ~ UnsetTarget ~ ";" }
UnsetTarget    = { Variable }

// https://developer.fastly.com/reference/vcl/statements/add/
AddStatement = { "add" ~ AddTarget ~ "=" ~ AddValue ~ ";" }
AddTarget    = { Variable }
AddValue     = { Expr }

// https://developer.fastly.com/reference/vcl/statements/call/
CallStatement = { "call" ~ CallTarget ~ ";" }
CallTarget    = { Ident }

// https://developer.fastly.com/reference/vcl/statements/declare/
DeclareStatement = { "declare" ~ "local" ~ DeclareTarget ~ DeclareType ~ ";" }
DeclareTarget    = { Variable }
DeclareType      = { Type }

// https://developer.fastly.com/reference/vcl/statements/error/
ErrorStatement = { "error" ~ ErrorCode? ~ ErrorMessage? ~ ";" }
ErrorCode      = { Number }
ErrorMessage   = { StringToken }

// https://developer.fastly.com/reference/vcl/statements/esi/
EsiStatement = { "esi" ~ ";" }

// https://developer.fastly.com/reference/vcl/statements/include/
IncludeStatement = { IncludeDeclaration }

// https://developer.fastly.com/reference/vcl/statements/log/
LogStatement = { "log" ~ LogTarget ~ ";" }
LogTarget    = { Expr }

// https://developer.fastly.com/reference/vcl/statements/restart/
RestartStatement = { "restart" ~ ";" }

// https://developer.fastly.com/reference/vcl/statements/return/
ReturnStatement =  { "return" ~ ReturnValue? ~ ";" }
ReturnValue     = _{ Expr }

// https://developer.fastly.com/reference/vcl/statements/synthetic/
SyntheticStatement =  { "synthetic" ~ SyntheticValue ~ ";" }
SyntheticValue     = _{ Expr }
// https://developer.fastly.com/reference/vcl/statements/synthetic-base64/
SyntheticBase64Statement = { "synthetic.base64" ~ SyntheticValue ~ ";" }
